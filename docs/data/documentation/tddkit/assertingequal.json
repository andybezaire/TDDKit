{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"XCTAssertEqual"},{"type":"text","text":" is a handy function to use in tests."},{"type":"text","text":" "},{"type":"text","text":"It is a quick way to compare two values for equality, and gives a nice failure method"},{"type":"text","text":" "},{"type":"text","text":"when the values don‚Äôt match. It can be used with values, optionals, collections."},{"type":"text","text":" "},{"type":"text","text":"Just pass them to the function and it works. Very helpful. üëç"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But often we want more feedback about why the comparison failed."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"were the types mismached or was the value actually "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"?"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"were the collections containing the same elements, but just in the wrong order?"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"did the collections have a different number of elements, or did they have the same "},{"type":"codeVoice","code":"count"},{"type":"text","text":"but different elements?"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Often we need to write multiple assertions so that the test error can give us clues as to why the comparison failed."},{"type":"text","text":" "},{"type":"text","text":"This leads to longer than needed tests. This group of helpers will help improve that."}]},{"anchor":"Assert-Cast-Equal","level":3,"type":"heading","text":"Assert Cast Equal"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/TDDKit\/documentation\/TDDKit\/XCTest\/XCTestCase\/XCTAssertCastEqual(_:_:_:file:line:)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Sometimes and optional value needs to be cast and compared with a real result."},{"type":"text","text":" "},{"type":"text","text":"If the cast is performed inside the assert equal, it is not clear if"},{"type":"text","text":" "},{"type":"text","text":"the captured value was the wrong type or if it was nil. This can lead to"},{"type":"text","text":" "},{"type":"text","text":"using a separate assert is not nil check, adding boilerplate."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method will first check to see if the value is not nil and then"},{"type":"text","text":" "},{"type":"text","text":"will perform the cast and assert equal, giving nice error messages for each case."}]},{"type":"codeListing","syntax":"swift","code":["func test_failingGetUsername_createPoem_fails() async throws {","    let error = XCTAnyError()","    let (sut, _) = makeSUT(getUsernameResult: .failure(error))","    ","    let capturedError = await XCTCaptureError(from: try await sut.createPoem())","    ","    XCTAssertCastEqual(capturedError, error)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The equivalent test using only standard "},{"type":"codeVoice","code":"XCTest"},{"type":"text","text":" asserts:"}]},{"type":"codeListing","syntax":"swift","code":["func test_failingGetUsername_createPoem_fails() async throws {","    let error = XCTAnyError()","    let (sut, _) = makeSUT(getUsernameResult: .failure(error))","    ","    let capturedError = await XCTCaptureError(from: try await sut.createPoem())","    ","    XCTAssertNotNil(capturedError)","    XCTAssertCastEqual(capturedError as? XCTAnyError, error)","}"]},{"anchor":"Assert-Contains-Equal","level":3,"type":"heading","text":"Assert Contains Equal"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/TDDKit\/documentation\/TDDKit\/XCTest\/XCTestCase\/XCTAssertContainsEqual(_:_:_:file:line:)"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When comparing two collections for equality, sometimes it is not clear if"},{"type":"text","text":" "},{"type":"text","text":"the captured collection was the same but just in a different order,"},{"type":"text","text":" "},{"type":"text","text":"or if the collections were actually containing different elements. This can lead to"},{"type":"text","text":" "},{"type":"text","text":"using separate asserts to compare the "},{"type":"codeVoice","code":"count"},{"type":"text","text":"s and check for "},{"type":"codeVoice","code":"contains"},{"type":"text","text":", adding boilerplate."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method will check to see if the collections have the same elements"},{"type":"text","text":" "},{"type":"text","text":"and will give a nice error messages when elements are missing or extra."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Usage:"}]},{"type":"codeListing","syntax":"swift","code":["func test_createPoem_callsServices() async throws {","    let (sut, spy) = makeSUT()","","    _ = try await sut.createPoem()","    ","    XCTAssertContainsEqual(spy.messages, [.getAge, .getUsername])","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The equivalent test using only standard "},{"type":"codeVoice","code":"XCTest"},{"type":"text","text":" asserts:"}]},{"type":"codeListing","syntax":"swift","code":["func test_createPoem_callsServices() async throws {","    let (sut, spy) = makeSUT()","","    _ = try await sut.createPoem()","    ","    XCTAssertEqual(spy.messages.count, 2)","    XCTAssertTrue(spy.messages.contains(.getAge))","    XCTAssertTrue(spy.messages.contains(.getUsername))","}"]},{"anchor":"Assert-Count-Equal","level":3,"type":"heading","text":"Assert Count Equal"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/TDDKit\/documentation\/TDDKit\/XCTest\/XCTestCase\/XCTAssertCountEqual(_:_:_:file:line:)"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When comparing two collections for equality, sometimes it is not clear if"},{"type":"text","text":" "},{"type":"text","text":"the captured collection was the wrong size or if it had differnt values. This can lead to"},{"type":"text","text":" "},{"type":"text","text":"using a separate assert to compare the "},{"type":"codeVoice","code":"count"},{"type":"text","text":"s, adding boilerplate."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method will first check to see if the collections have the same "},{"type":"codeVoice","code":"count"},{"type":"text","text":" and then"},{"type":"text","text":" "},{"type":"text","text":"will assert equal on the elements, giving nice error messages for each case."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Usage:"}]},{"type":"codeListing","syntax":"swift","code":["func test_fetch_succeeds() async throws {","    let (values, response) = uniqueValuesSet()","    let (sut, _) = makeSUT(fetchResult: .success(response))","","    let capturedValues = try await sut.fetch()","    ","    XCTAssertCountEqual(capturedValues, values)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The equivalent test using only standard "},{"type":"codeVoice","code":"XCTest"},{"type":"text","text":" asserts:"}]},{"type":"codeListing","syntax":"swift","code":["func test_fetch_succeeds() async throws {","    let (values, response) = uniqueValuesSet()","    let (sut, _) = makeSUT(fetchResult: .success(response))","","    let capturedValues = try await sut.fetch()","    ","    XCTAssertEqual(capturedValues.count, values.count)","    XCTAssertEqual(capturedValues, values)","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/tddkit\/assertingequal"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/TDDKit\/documentation\/TDDKit\/AssertingEqual","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Helpers similar to "},{"type":"codeVoice","code":"XCTAssertEqual"},{"type":"text","text":"."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Asserting Equal","role":"article","modules":[{"name":"TDDKit"}]},"hierarchy":{"paths":[["doc:\/\/TDDKit\/documentation\/TDDKit"]]},"seeAlsoSections":[{"title":"Asserting Equal","identifiers":["doc:\/\/TDDKit\/documentation\/TDDKit\/XCTest\/XCTestCase\/XCTAssertCastEqual(_:_:_:file:line:)","doc:\/\/TDDKit\/documentation\/TDDKit\/XCTest\/XCTestCase\/XCTAssertContainsEqual(_:_:_:file:line:)","doc:\/\/TDDKit\/documentation\/TDDKit\/XCTest\/XCTestCase\/XCTAssertCountEqual(_:_:_:file:line:)"],"generated":true}],"references":{"doc://TDDKit/documentation/TDDKit/XCTest/XCTestCase/XCTAssertCountEqual(_:_:_:file:line:)":{"role":"symbol","title":"XCTAssertCountEqual(_:_:_:file:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"XCTAssertCountEqual"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(() "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", () "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", () -> "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Assert the collections are the same size and that they are equal."}],"identifier":"doc:\/\/TDDKit\/documentation\/TDDKit\/XCTest\/XCTestCase\/XCTAssertCountEqual(_:_:_:file:line:)","kind":"symbol","type":"topic","url":"\/documentation\/tddkit\/xctest\/xctestcase\/xctassertcountequal(_:_:_:file:line:)"},"doc://TDDKit/documentation/TDDKit":{"role":"collection","title":"TDDKit","abstract":[{"type":"text","text":"Helping you improve the test driven development experience in "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Swift"}]},{"type":"text","text":"."}],"identifier":"doc:\/\/TDDKit\/documentation\/TDDKit","kind":"symbol","type":"topic","url":"\/documentation\/tddkit"},"doc://TDDKit/documentation/TDDKit/XCTest/XCTestCase/XCTAssertCastEqual(_:_:_:file:line:)":{"role":"symbol","title":"XCTAssertCastEqual(_:_:_:file:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"XCTAssertCastEqual"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"V"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(() "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"V"},{"kind":"text","text":"?, () "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", () -> "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Assert the first value is not nil and can be cast to the type of the second value and that they are equal."}],"identifier":"doc:\/\/TDDKit\/documentation\/TDDKit\/XCTest\/XCTestCase\/XCTAssertCastEqual(_:_:_:file:line:)","kind":"symbol","type":"topic","url":"\/documentation\/tddkit\/xctest\/xctestcase\/xctassertcastequal(_:_:_:file:line:)"},"doc://TDDKit/documentation/TDDKit/XCTest/XCTestCase/XCTAssertContainsEqual(_:_:_:file:line:)":{"role":"symbol","title":"XCTAssertContainsEqual(_:_:_:file:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"XCTAssertContainsEqual"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(() "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", () "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", () -> "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Assert the first collection exactly contains all the elements of the second collection."}],"identifier":"doc:\/\/TDDKit\/documentation\/TDDKit\/XCTest\/XCTestCase\/XCTAssertContainsEqual(_:_:_:file:line:)","kind":"symbol","type":"topic","url":"\/documentation\/tddkit\/xctest\/xctestcase\/xctassertcontainsequal(_:_:_:file:line:)"}}}